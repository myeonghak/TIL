[주파수 1Ghz는 얼마나 빠른가?]
(추천시스템 교과서 2.4장 서두)
In such a case,
O(m2 · n') = O(10^18) operations will be required. If we make the conservative assumption
that each operation requires an elementary machine cycle, a 10GHz computer will require
10^8 seconds, which is approximately 115.74 days
-> 1GHz 컴퓨터는 1,000,000,000번(10억, 10^9) 연산을 1초에 수행함.  
	
한편 ' 헤르츠 (Hertz)'는 0과 1 신호가 한번씩 실행되는 주기(사이클, Cycle)를 의미한다. 
즉, 1Hz는 1초에 0, 1 신호를 한 번 실행하는 것이다. 1초에 1,000번의 신호를 실행하면 1KHz(킬로헤르츠), 
100만번 실행하면 1MHz(메가헤르츠)가 된다. 
마찬가지로 1GHz(기가헤르츠)는 1,000MHz이다(여기서는 1,024가 아니다).
https://it.donga.com/93/








[BIOS란?]
운영 체제 가운데 컴퓨터의 입출력을 담당하는 소프트웨어. 사용자가 컴퓨터를 켜면 시작되는 프로그램으로서, 주변 장치와 컴퓨터 운영 체제 사이의 데이터 흐름을 관리함.
(위키)

:기본 출력 시스템(Basic Input Output System)
메인보드의 BIOS를 ROM BIOS라고 부름. 
ROM BIOS는 운영체제와 하드웨어 사이의 입출력을 담당하기 위해 저수준의 소프트웨어와 드라이버로 이루어진 펌웨어를 말함.

BIOS는 부팅 후 POST를 수행함. 
Power On Self Test (전원 켜고, 자가 시스템 점검)
또한 부팅할 때 장치들을 식별 및 진단하고, 운영체제가 하드웨어를 사용할 수 있도록 초기화함.

BIOS 펌웨어는 메인보드의 BIOS칩에 저장되어 있음. BIOS는 비휘발성 메모리임.
BIOS는 컴퓨터가 꺼졌을 때 설정값을 유지해야함(날짜, 시간, 부팅순서,하드웨어 설정값 등.)

https://www.youtube.com/watch?v=7I8s8rwaudk&list=LLypIXWIsUMIMvCa6zQfOZmQ&index=3&t=0s

[CMOS란?]
: Complementary metal-oxide semiconductor
소규모 배터리 전원을 사용하는 디지털 로직 IC로써, BIOS 설정값이 이 칩에 저장됨.
이 CMOS 칩은 휘발성 메모리이며, 컴퓨터가 꺼졌을 때 BIOS 설정값을 유지하기 위해 전원이 필요(CMOS 배터리가 이 역할을 수행.)
이 배터리가 제거되면 CMOS 안에 있던 BIOS로 설정했던 값이 디폴트 값으로 초기화됨.



# 요약하자면, 시스템 설정을 위한 소프트웨어는 BIOS이고, 이 BIOS의 설정값 등의 데이터를 저장하는 공간이 CMOS임.


[UEFI란?]
: Unified Extensible Firmware Interface.
BIOS의 한계를 극복하고 안정성과 편의성을 높인 펌웨어 인터페이스.



[펌웨어란?]
펌웨어는 일반적으로 롬(ROM)에 저장된 하드웨어를 제어하는 마이크로 프로그램을 의미한다. 
프로그램이라는 관점에서는 소프트웨어와 동일하지만 하드웨어와 밀접한 관계를 가지고 있다는 점에서 일반 응용소프트웨어와 구분되어 펌웨어는 소프트웨어와 하드웨어의 특성을 모두 가지고 있다고 할 수 있다.
[네이버 지식백과] 펌웨어 [firmware] (두산백과)

펌웨어는 소프트웨어와 하드웨어의 중간에 해당하는 것이며 소프트웨어를 하드웨어화한 것이라고 할 수 있다. 
즉, 고정도가 높고, 시스템의 효율을 높이기 위해 ROM(read-only memory)에 넣은 기본적인 프로그램이나 데이터. 
마이크로컴퓨터에서는 거의 모든 프로그램이 ROM 상에 기재되어 있기 때문에 프로그램이 들어 있는 ROM을 가리키는 경우가 많다.
[네이버 지식백과] 펌웨어 [firmware] (컴퓨터인터넷IT용어대사전, 2011. 1. 20., 전산용어사전편찬위원회)


s
[환경변수란?]
https://m.blog.naver.com/PostView.nhn?blogId=zxwnstn&logNo=221521038431&proxyReferer=https:%2F%2Fwww.google.com%2F
-> os에서 자식 프로세스들을 생성할 때 참조하는 변수들


[CLI란?]
Command Line Interface의 약자.



[tmp 폴더란?]
해당 폴더 안의 파일(임시 파일)은 프로그램이 실행이 될 경우 PC의 메모리에서 실행이 돼야 하지만 
메모리의 주소 값보다 더 큰 데이터나 프로세스를 처리할 때 디스크 메모리를 끌어서 쓰는 과정에서 생깁니다.
시스템 복원 지점을 만들때도 위의 사항이 같이 적용 됩니다.
일종의 사용하고 남은 파일이므로 컴퓨터를 사용하신 후 폴더 안의 파일은 백신 프로그램 등으로 정리시켜 주셔도 무방합니다.




[컴파일이란?]
https://m.blog.naver.com/white_cap/221003190571

사람이 이해하는 언어를 컴퓨터가 이해할 수 있는 언어로 바꾸어주는 과정. 
원시코드(우리가 인간언어의 형태로 코딩해 놓은 소스 코드 스크립트)를 목적 코드(기계가 이해할 수 있는 0,1 형태로 이루어진 코드)로 바꾸어 주는 과정을 컴파일이라고 함.
이 목적코드로 이루어진 목적파일(.obj)을 링크라는 과정을 통해 실행파일(.exe)로 바꾸어 줄 수 있다.
-> 왜 컴파일하는데 하루 종일 걸리는거지?




[해시란?]
key-value를 매핑해 놓은 자료.

[오버헤드란?]
오버헤드는 어떤 처리를 하기 위해 들어가는 간접적인 처리 시간·메모리 등을 말한다. 

[MVC란?]
-> Model-View-Controler 구조, 디자인 패턴의 한가지.
-> 3가지의 형태로 역할을 나누어 개발. 비지니스 처리 로직과 사용자 인터페이스 요소를 분리시켜 서로 영향없이 개발하기 수월하다.
https://medium.com/@jang.wangsu/%EB%94%94%EC%9E%90%EC%9D%B8%ED%8C%A8%ED%84%B4-mvc-%ED%8C%A8%ED%84%B4%EC%9D%B4%EB%9E%80-1d74fac6e256
(여기서는 모바일 개발의 맥락에서)
-> Model: 내부 비즈니스 로직 처리, 어플리케이션이 "무엇"을 할 것인가
-> View: 모바일 화면의 로직처리, 화면에 무엇인가 보여주기 위한 역할. 완전히 UI에 의존적임.
-> Controller : Model과 View가 각각 무엇을 해야할지 알고 있고, 통제하는 부분. M/V 서로의 독립성을 지켜주도록 통제

-> 한계점: View가 여러개의 model에 연결될 수 있음? (;;) 이로 인해 뷰와 모델이 서로 의존성을 띠게 됨. 
이 의존성때문에 MVC 구조가 복잡하고 비대해져서, 기능 추가등이 어려워짐.


[디자인 패턴이란?]
: 소프트웨어 공학에서 디자인 패턴(Design pattern)은 프로그램 개발 시에 자주 부닥치는 애로 상황에 대한 일반적이고 재사용 가능한 추상화된 해결책이다. 

https://shoark7.github.io/programming/knowledge/what-is-design-pattern

예시 1) 싱글톤 - "리눅스의 root 계정 관리"
"""
간단하게 예를 들어보자. 어떤 시스템의 최고 관리자가 있는데 이 사람에게만 주어지는 슈퍼 계정을 만들어야 한다. 
그런데 하늘에 두 개의 태양이 있을 수 없듯이 슈퍼 계정도 두 개 이상 만들 이유도 없고, 해서도 안 된다.(최고 관리자가 아닌 사람이 여분의 계정을 오용할 수 있기 때문이다.) 
이런 류의 문제 상황은 생각보다 흔하고 이를 해결하기 위한 디자인 패턴은 Singleton이라고 이름지어져 있다. 
Singleton은 클래스를 만들되 그 클래스의 인스턴스는 2개 이상 생성하지 못하게 하는 방법이다. 이 디자인 패턴은 밑에서 직접 구현할 것이다.
"""
-> 즉, 개발할 때 마주하는 여러 문제를 해결하기 위한, 재사용 가능하고 일반화 가능한 추상적 해결책!
-> 디자인 패턴이 OOP에만 국한된 개념은 아니지만, OOP가 하도 메인스트림이다 보니 OOP 패러다임의 디자인 패턴에 대한 연구가 많이 진행되었음. 그래서 디자인 패턴-OOP 이런 쌍이 만들어 진 것. 

-> 싱글톤이란, 하나의 클래스에 단 하나의 인스턴스를 허용하는 패턴을 의미한다.


디자인 패턴의 세가지 분류
4-1) Creational Pattern
:클래스의 인스턴스를 만드는 것과 관련된 디자인 패턴

4-2) Structural pattern
:클래스나 인스턴스들의 관계와 관련된 디자인 패턴

4-3) Behavioral pattern
: Behavioral patterns는 클래스나 인스턴스의 패턴뿐만 아니라, 이들이 동작하는 방식, 이들의 소통(Communication)방식에도 패턴을 정의한다. 
이 패턴들은 객체 속 작업이 진행되는 워크 플로우를 정의하고 따라갈 수 있기 때문에 유용하다.

Behavioral patterns는 여러 알고리즘이나 기능들이 어떻게 흐르는지, 어떤 순서로 소통하는지에 대해 정의하는 패턴이다.
예시 : "내 성별에 따라 Male 또는 Female 클래스를 만들어서 설문을 시작한다. 마지막 줄을 보면 내 성별을 남성으로 입력했기 때문에 남성에게만 해당되는 질문이 입력되는 것을 확인할 수 있다."



[함수형 프로그래밍이란?]
: 함수형 프로그래밍은 자료 처리를 수학적 함수의 계산으로 취급하고 상태와 가변 데이터를 멀리하는 프로그래밍 패러다임의 하나이다. 
명령형 프로그래밍에서는 상태를 바꾸는 것을 강조하는 것과는 달리, 함수형 프로그래밍은 함수의 응용을 강조한다. (위키백과)

-> 즉, 입력이 주어지면 출력이 나오는 형태로 프로그래밍 하는 패러다임을 의미함. 
-> 가변적으로 기능할 수 있고, sideEffect를 가질 수 있는 변수를 기피하고 반대로 상수를 사용한다.
-> 모든 것은 객체이다. 코드를 간결하고 가독성 높게 관리할 수 있다.




[절차 지향이란?]
: 순차적인 처리가 중요시되며, 프로그램 전체가 유기적으로 연결되도록 만드는 프로그래밍 기법을 의미함. 주로 C 언어의 개발에 사용됨.
예전에는 HW와 SW 개발 속도차이가 크지 않았으나, SW 언어의 발달과 컴파일러의 발달로 HW가 SW를 따라오지 못하는 상황이 발생함. 이러한 맥락에서 객체지향이 등장함.
-> 장점) 컴퓨터의 처리 구조와 유사해 실행 속도가 빠르다 (CPU 연산이 이루어지는 과정을 생각해보면 직관적)
-> 단점) 유지보수가 어렵고, 실행 순서가 정해져 있는 상태로 개발하므로 코드 순서가 바뀌면 동일한 결과를 보장하기 어려움, 디버깅이 어려움

-> 마치 알고리즘 그래프에서, 순서대로 흐름이 이루어지는 방식과 같음. 
-> 그러나 객체지향 방식은 재사용 가능한 기능을 담당하는 객체를 만들어 하나의 책임만을 지게끔 구성해 놓는 것.

* 객체지향의 단점은 절차 지향의 장점의 반대와 같음. 대표적인 단점으로는 설계에 많은 시간 소요가 들어간다는 점.




[캡슐화란?]
: 관련된 데이터와 알고리즘이 하나의 묶음으로 정리된 것으로써, 데이터를 감추고 외부 세계와의 상호작용은 메소드를 통해 수행. 라이브러리로 만들어 관리하는 방식.




[다이나믹 프로그래밍(동적 계획법)]

https://www.zerocho.com/category/Algorithm/post/584b979a580277001862f182

:동적 계획법이란, 큰 문제를 풀 때 한번에 해결하기 힘들 경우 작은 여러개의 문제로 쪼개어 푸는 기법을 의미함.
이 과정에서 중복되는 계산의 경우 값을 저장해 두었다가 재사용하는 기법이 자주 사용된다.

-> 이름만 다이나믹 프로그래밍, 동적 계획법이지 사실은 전혀 다이나믹하지도 않다.



[Bash란?]

https://dohk.tistory.com/191

-> 쉘이란, 사용자와 커널 사이의 매개체 역할을 하는 프로그램임. 사용자가 커널에 직접 명령을 내릴 수 있도록 도와준다.
-> 즉, 사용자로부터 명령을 받아서 그것을 프로세싱하기 위해 커널에게 넘겨주는 일을 하는 프로그램이다.
-> 가장 널리 쓰이는 프로그램이 bash(Bourne Again Shell) 이다.
-> bash는 5개의 설정파일을 갖는다.

1) /etc/profile : 환경변수와 bash가 수행될 때 실행되는 전역적인 시스템 설정과 관련된 파일. bashrc와 마찬가지로 로그인시 수행되는 시스템 전체 환경 설정 파일.
2) /etc/bashrc :  ~/.bashrc와는 달리, 전체용 환경 설정 파일.
-> 이 두 파일은 전역적인 파일이다.

3) ~/.bash_profile : 환경변수와 bash가 수행될 때 실행되는 프로그램을 제어하는 지역적인 시스템 설정과 관련된 파일. 이 환경변수들은 오직 해당 사용자에게만 한정됨.
이 파일은 전역 설정 파일인 /etc/profile이 수행된 다음 곧바로 수행됨.

4) ~/.bashrc: 별칭(alias)과 bash가 수행될 때 실행되는 함수를 제어하는 지역적인 시스템 설정과 관련된 파일. 이 별칭과 함수들은 오직 해당 사용자에게만 한정됨.

5) ~/.bash_logout: 사용자가 로그아웃하기 바로 직전에 실행하는 프로그램에 관한 bash의 지역적인 시스템 설정과 관련된 파일. 
이들 프로그램은 오직 그 프로그램을 실행하는 사용자에게만 영향을 끼치며, 다른 사용자에게는 아무런 영향을 줒 ㅣ않음.

-> 이들은 사용자 개개인의 홈디렉토리에서 찾아볼 수 있는 숨김 파일이다.


* .bashrc는 bash가 실행될때마다 수행되고,
* bash_profile은 bash가 login shell로 쓰일 때 (즉, 처음 login할때) 수행됨.


[REST API란?]
https://gmlwjd9405.github.io/2018/09/21/rest-and-restful.html


-> REST: Representational State Transfer의 약자. 자원을 이름(자원의 표현)으로 구분하여 해당 자원의 상태(정보)를 주고 받는 모든 것을 의미함.
+ HTTP URI(Uniform Resource Identifier)를 통해 자원(Resource)을 명시하고, 
HTTP Method(POST, GET, PUT, DELETE)를 통해 해당 자원에 대한 CRUD(Create, Retrieve, Update, Delete) Operation을 적용하는 것을 의미한다.

-> REST API : API(Application Programming Interface)란 데이터와 기능의 집합을 제공하여 컴퓨터 프로그램간 상호작용을 촉진하며, 서로 정보를 교환가능 하도록 하는 것

-> RESTful: 일반적으로 REST라는 아키텍처를 구현하는 웹 서비스를 나타내기 위해 사용되는 용어. ‘REST API’를 제공하는 웹 서비스를 ‘RESTful’하다고 할 수 있다.
RESTful은 REST를 REST답게 쓰기 위한 방법으로, 누군가가 공식적으로 발표한 것이 아니다. 즉, REST 원리를 따르는 시스템은 RESTful이란 용어로 지칭된다.



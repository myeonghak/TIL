https://www.daleseo.com/python-type-annotations/


"" : str ""
이것만 기억하면 됨



1) 파이썬 3.5부터 추가됨. 

2) 동적 프로그래밍 언어인 파이썬에서는 인터프리터가 코드를 실행하면서 타입을 추론하여 체크.
-> 변수의 타입은 고정되어있지 않으므로 개발자가 자유롭게 변경 가능

3) 타입에 대한 유연함으로 인해 일회성 스크립트 개발 및 소규모 어플리케이션에서는 장점을 띰.
그러나 대규모 어플리케이션에서는 치명적인 버그의 가능성을 키움.
이를 보완하기 위해 주석처리를 통해 타입힌팅을 해주어야 했음.
그러나 이는 정해진 표준이 없고 일반 주석과 구분이 어렵다는 단점이 존재.

4) 타입 어노테이션 (type annotation)이라는 방법으로 파이썬 코드의 타입 표시를 표준화할 수 있음.
IDE, 린터(linter)에서도 해석할 수 있도록 고안되었음.
-> 코드 자동완성, 정적 타입 체킹에도 활용됨.
* linter(or lint): 린트 또는 린터는 소스 코드를 분석하여 프로그램 오류, 버그, 스타일 오류, 의심스러운 구조체에 표시를 달아놓기 위한 도구들을 가리킨다. (위키피디아)


5) 그러나 실질적인 어떤 제약사항도 강요하지는 않음!
-> 경고나 오류가 발생하는 것은 아님.
-> 단순히 도와주는 용도로 사용됨.

 
 
6) 용법 1, 변수에 타입 어노테이션 추가

name: str = "LEE"
age: int = 25

7) 용법 2, 함수에 타입 어노테이션 추가

def 함수명(<필수 인자>: <인자 타입>, <선택 인자>: <인자 타입> = <기본값>) -> <반환 타입>:
    ...
	
	
def plus_삼(num1: int, num2: float = 3.0) -> float:
    return num1 + num2
	

8) 타입 어노테이션 검사 
내장 사전 객체인 __annotations__ 를 출력하면 됨.

9) 내장 타입 뿐만아니라 사용자 클래스를 타입 어노테이션에 사용 가능

10) typing 모듈을 사용하면, 복잡한 타입 어노테이션을 관리할 수 있음


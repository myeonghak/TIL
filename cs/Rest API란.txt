RestAPI

	1.	여기서 정리하는 restAPI는 학술적 의미가 아닌 실용적인 의미임
	
	2.	정보를 주고받는 데 있어서 개발자들 사이에 널리 쓰이는 일종의 형식. 
		특정 기술이나 제품이 아닌 형식이기 때문에, 어떤 언어나 프레임워크를 쓰든, 어떤 디바이스에 소프트웨어를 만들든 이 폼에 맞추어 제작하면 됨.
		
	3.	API란(Application Programming Interface)?
		서버와 앱들 사이의 인터페이스. 특정 소프트웨어가 다른 소프트웨어로부터 지정된 형식으로 요청, 명령을 받을 수 있는 수단.
		네트워크 상에만 있는 것은 아님. 비동기 프로그래밍의 경우 로컬프로그램인 브라우저는 Web API를 통해 자바스크립트로부터 특정 동작들을 지시받기도 함. 
		또, 윈도우에서는 개발자들이 윈도우의 전문지식 없이도 의도한 기능을 구현할 수 있도록 윈도우 API를 제공함.
		
	4.	Rest API란?
		프론트엔드 웹에서 서버에 데이터를 요청하거나, 배달 앱에서 서버에 주문을 넣거나 등의 서비스에서 널리 사용되는 API의 형식. 과거의 SOAP이라는 복잡한 형식을 대체함.
		
		가장 중요한 특성: 각 요청이 어떤 동작이나 정보를 위한 것인지를 그 요청의 모습 자체로 추론이 가능.
		
	5.	URI: 자원을 구조와 함께 나타내는 형태의 구분자. www.hufs.com/dept/scan/2012/02406  이런 식으로 구성.
	
	6.	CRUD(Create,Read,Update,Delete)를 위해 서버에 rest API로 요청을 보낼때는 http라는 통신 규약을 따름. 
		이 http로 요청을 보낼 때, 다양한 매서드를 사용할 수 있음. 
		restAPI에서는 GET/POST/DELETE/PUT 4가지 혹은 PATCH를 붙여 5가지를 사용함. 
		
	7.	POST/PUT/PATCH에는 body가 있어 GET/DELETE보다 더 많은 정보를 담을 수 있고, 보안상 더 안전함. 
	
	8.	이 매서드마다 기능이 제한되어 있지는 않음. 가령 POST하나로도 CRUD 모두 수행 가능. 그러나 Restful 하게 만들기 위해서는 이들을 목적에 따라 구분하여 사용함.
	
	9.	GET은 read, POST는 create, PUT/PATCH는 update, DELETE는 delete에 쓰임. 
		여기서 PUT은 정보를 통째로 갈아 끼울 때, PATCH는 일부의 정보를 업데이트할 때 쓰는 것이 정석임.
		
	10.	POST/PUT으로도, 데이터 양이 작은 경우 GET으로도, 모두 할 수 있지만 그럴 경우 URI에 모두 create/read/update/delete등의 정보를 명기해 주어야하므로, restful하지 않아짐.
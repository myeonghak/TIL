함수형 프로그래밍

초콜렛 공장의 예시를 기억하자.
객체지향방식: 로스팅담당, 분쇄담당, 제조사, 절단담당이 각각 역할을 맡아 협력하며 일함
함수형방식: 입력을 받으면 단순히 출력을 만들어내기만 함.


	1.	객체지향과 비슷한 특징을 공유하기도 하는 등, 상반된 개념이 아님
	2.	함수형 프로그래밍의 특성
		1) 정해진 입력과 출력이 있음.
		2) 외부 환경으로부터 철저히 독립적임. (시간 등에 영향을 받지 않음. 변수가 없음)
		3) 같은 입력을 받으면 항상 동일한 결과물을 만들어 냄(순수함수)
		
	3.	부작용으로부터 자유롭다는 특성으로 인해 각광받음.
		부작용: 어떤 함수의 동작에 의해 프로그램 내 특정 상태가 변화하는 것(시간 지연, 음수 출력... 동시에 한 디비에 접근할 경우 락이 걸린 경우 등).
		
	4.	파라미터를 아예 쓰지 않는다는 것이 아님. 일정 단위의 작업에 있어서는 부수효과 없이 예측가능한 안정적인 프로그램을 짜는 것임.
	
	5.	멀티 코어를 이용한 멀티 프로세싱이 중요해짐에 따라 필요성이 더욱 부각됨
	
	6.	함수형 프로그래밍의 대표적 특징과 요소
		1) 함수형 프로그래밍은 선언형이다
		: 우리가 익숙한 명령형(이거 해서 이렇게 해라!)과는 달리, “이거는 이거다!”라는 방식으로 프로그래밍 하는 것.
		2) 함수도 ‘값’이다
		: 함수를 값처럼 다룸. R의 tidyverse pipeline을 생각하면 됨. 함수는 단순히 예측가능한 결과값을 내는 하나의 값이 됨
		3) 고계함수
		: 함수를 입력으로 받는 함수
		4) 커링
		: 여러 인자를 받는 함수에 일부 인자를 받아서, 나머지 인자를 받는 다른 함수를 만들어 낼 수 있는 프로그래밍 기법. 
		인자가 준비되지 않았을 때 임시로 넘겨주거나 다른 함수의 인자로 넘겨주는 등의 로직이 가능해짐
		5) 함수 컴비네이터
		: R 파이프라인같은 문법
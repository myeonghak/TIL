[TIL] 기계학습 강좌 2-2. intro to 룰기반 머신러닝



1. Find-S algorithm
	- 모든 피처에 대해 null이라는 가설을 놓은 초기상태에서 시작하여, 인스턴스를 확인할 때마다 조건을 union해나감으로써 각 피처의 가설을 업데이트 하는 방식
	- 아이가 나가서 노는 예시를 그대로 들고옴.비온다의 0일때 인스턴스가 있으면 비가 오지않을때 나간다라는 가설을 만들고, 그 다음에 비온다가 0일때 인스턴스가 등장하면 0과 1일때의 합집합을 취해 “don’t care”라는 의미의 ?으로 가설을 바꾸어주는 식임.
	- 모두 null 가설인 specific한 케이스에서 점차 general한 가설로 수정해나가는 과정을 거침
	- 그러나 많은 가설 집합 중에 하나의 가설집합을 콕 찝는 것이(determine 하는것이) 타당하냐는 의문이 제기됨.

2. Version Space
	- 인스턴스로부터 생성할 수 있는 다양한 버전이 존재함. 따라서 한 버전으로 converge하기가 어려움. 
	- 가능한 가설의 파라미터를 설정할 필요가 있음.
	- 가능한 가설 집합==Version Space
	- General boundary G: 가설 집합이 가질 수 있는 일반적인 성질의 한도
	- Specific boundary S: 가설 집합이 가질 수 있는 상세한 성질의 한도
	- VS는 이 두 바운더리 사이에서 정의됨. 너무 상세하지도, 일반적이지도 않은 그 사이에 존재하는 것임.

3. Candidate Elimination Algorithm
	- VS 관리를 위해, CE 알고리즘을 적용할 수 있음. 위에서 정한 바운더리 사이의 일정 집합을 점점 좁혀가면서 원하는 집합을 찾을 수 있음.
	- 라벨이 1인 positive case에서는 처음 살펴본 방식처럼 모두 null이라는 가설에서 합집합으로 나아감.
	- 라벨이 0인 negative case에서는 반대로 most general한 가설에서 조금 더 specific하게, S 바운더리와 논리적으로 대조하며 가설을 수정함. 여러개가 나올 수 있음

4. 잘 작동하는가?
	- Candidate Elimination 알고리즘이 true(correct) hypo에 수렴할까?
	1) converge란? 하나의 가설을 선택할 수 있음 (데이터가 계속 들어오면)
	2) correct란? 관측된 시스템 내에서 가설이 참임
	- 전제한 가설이 참이라면, 둘 다 yes, yes임.
	- 그러나 우리는 완벽한 세계에 살고있지 않으므로,
	1) 데이터의 인스턴스에는 항상 노이즈가 존재
	2) 사용한 변수 외에 decision dactor가 존재함
	- 따라서 노이즈에 의해 올바른 가설이 삭제될수도 있다는 것이 현실의 문제임
	- 따라서 위의 질문에는 yes, no를 말할 수 없음
[recsys 2020 Tutorial-Feature  Engineering for recsys -2]



1. Binning
	- 수치형 혹은 범주형 변수를 묶어주어 새로운 범주로 만들어주는 기법으로, 도메인 지식등을 활용해 유용한 지식을 추려내어 모델에 전달할 수 있음
	

2. 정규화
	- 각 피처의 손실함수에 대한 영향력을 균일하게 보정하기 위해 상대적으로 불규칙한 분포를 정규 분포에 근사하게끔 처리
	- mean/std normalization
	- log-based normalization: 값의 편차가 매우 심한 변수의 경우 log를 취해준 후 mean을 빼고 std로 나누어 줌
	- scale to 0-1 (min-max scaling)
	- 뉴럴넷의 더 나은 학습을 위해서는 변수가 정규분포를 띠도록 유도하는게 중요하다는 경험 법칙. 0-1로 스케일링 하는 것이 가끔 이점이 있다고 함.
	

3. 가우스 랭크(Gauss rank)
	- 수치형 변수를 정규분포에 근사하도록 변형해주는 기법임. 랭크를 계산한 뒤, 변수 값을 -1~1로 스케일 해주고, 역 화살표 함수(?)인 에어 펑션(?)을 적용해주고..
	- 주목할 점은, 데이터를 2번 rank해주고 선형적으로 -1~1까지 스케일 해주므로, 2-3개의 이웃과 얼마나 가까운지, 먼지에 대한 정보를 잃을 수 있음.
	

4. 시계열 데이터 
	- window추가
	- 이전 시점과의 차이(가격의 변동 등을 캐치)를 피처로 추가 ->(테스트에선 어떻게?)

5. 확장성
	- 판다스
	- Rapids: gpu활용, 데이터 조작 및 분석 라이브러리
	- Dask: lazy execution으로 pandas, cudf 알고리즘을 최적화함. 이들의 wrapper임. chunk로 데이터를 쪼개어 조작하므로 시스템/gpu메모리에 구애받지 않음
	- NVTabular: dask_cudf의 wrapper로, FE를 위한 간편한 API를 제공함. 역시 chunk단위로 데이터를 다룸

6. NVTabular: GPU사용 추천시스템 ETL 툴
	- GPU가속된 feature transform
	- 다룰수 있는 데이터셋의 크기가 gpu, cpu 메모리에 구애받지 않음 
	- 고도의 추상화: 어떻게 할지, 어떻게 스케일할지에 대해서 고민하기보다는 무엇을 하고자 하는지에 집중
	- Pytorch, tf등의 주요 프레임워크에 배치 데이터 로딩 가능
	
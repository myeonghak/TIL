Stanford cs224w - 1. Introduction, structure of graphs

	1.	Why networks? 네트워크는 상호작용하는 객체들의 복잡한 시스템을 묘사하는 일반적인 언어임.
	
	2.	어떤 일군의 객체들이 있을 때, 이들을 단순히 군집으로 생각하기 보다는 연결된 관계의 그물로 생각할 수 있음. 
		이 연결된 관계를 연결선으로 표현함. 따라서 그래프는 엣지와 노드들로 구성되어 있음.
		
	3.	두 종류의 네트워크/그래프
		- networks(a.k.a natural graphs): 실제 세계의 현상에 대한 표현 방식. 
		소셜 네트워크, 전자 기기간의 커뮤니케이션 네트워크, 유전자/단백질의 연결구조, 우리 뇌 내에 존재하는 뉴런간의 연결구조 등
		- information graph: 앞의 네트워크에 비해 상대적으로 추상적인 개념. 정보 혹은 지식이 구성되고 연결됨. 
		scene graphs: 한 장면 내의 객체들이 어떻게 연관되어 있는지 모델링
		similarity network: 데이터를 취해, 그 안의 유사한 점들을 연결함.
		
		- 두 개념에 대한 구분은 때로 모호함.
		
	4.	Networks: knowledge discovery
		- 많은 시스템의 뒤에는 복잡한 연결 구조가 있음. 이 것이 바로 네트워크로, 이는 구성 요소간의 상호작용을 정의함.
		- 우리는 이러한 네트워크를 이해하지 않는 한, 해당 시스템을 모델링하거나 예측할 수 없을 것임.
	5.	머신러닝에서의 그래프
		- 복잡한 도메인(지식, 텍스트, 이미지 등)은 풍부한 관계적 구조를 갖는데, 이는 관계적 그래프(relational graph)로 표현될 수 있음.
		- 이러한 관계를 명시적으로 모델링함으로써, 더 나은 성능을 얻을 수 있음.
	6.	네트워크를 공부해야하는 이유
		- 그래프는 복잡한 데이터를 묘사하기 위한 범용적인 언어임. 과학, 자연, 기술의 네트워크는 생각보다 더욱 유사함.
		- 분야간의 공유된 어휘임. 컴퓨터 과학, 사회 과학, 물리학, 경제학, 통계학, 생물학 등
		- 데이터 활용성, 계산적 난점 등을 해결할 방법으로 활용 가능. 웹/모바일, 바이오, 헬스, 의료 분야 등 
		- 영향력! 소셜 네트워킹, 제약 디자인, 인공지능 추론 등.
		- 구글이 성공할 수 있던 이유는, 웹데이터가 그래프임을 이해했기 때문!
		

	7.	네트워크를 분석하는 방법
		- 주어진 노드의 색깔/타입을 예측하기
		: node classification
		- 두 노드가 연결되어 있는지를 예측
		: link prediction
		- 노드들의 빽빽하게 연결된 군집을 찾아내기
		: 커뮤니티 검출 (CD, community detection)
		- 두 노드들과 네트워크 간의 유사도를 측정
		: network similarity 
		
	8.	네트워크의 예시
		- social networks
		
		- infrastructure: 정전이 순차적으로 이루어 질 때, 어떤 기반시설끼리 연결되어 있는지를 이해하면 예측 가능
		
		- 지식 그래프
		: 이질적 그래프(heterogenous graph)는 노드가 각각 다른 특성을 갖고 있는 경우를 말함. 
		
		- 컨텐츠 추천은 link prediction의 예시로 사용될 수 있음!
		
		- 미디어 영역(retweet network)
		
		- 오정보 검출: 위키의 잘못된 정보를 네트워크 구조를 통해 검출해 냄.
		
		- 유행성 예측(predicting virality): 소셜 네트워크 내의 Information cascade를 예측. 
		강남스타일 전파 예측, product adoption
		
		- 바이오 제약: protein-protein interaction(PPI), metabolic networks. 
		복수의 약을 먹었을 때 발생할 수 있는 side effect를 예측. 약과 단백질간의 link prediction을 수행
		
	9.	그래프 임베딩
		- 그래프의 노드 등을 d차원의 벡터공간 내로 임베딩하여, 유사한 관계를 갖는 개체들을 추천해주는 등의 작업을 수행 가능
	10.	네트워크의 구조
		- 네트워크란, 몇 쌍의 객체가 링크에 의해 연결된, 객체들의 연속임.
		- 네트워크 구조란?
		- 네트워크의 구성요소
			1) 객체(object): nodes, vertices
			2) 상호관계(interactions): links, edges
			3) 시스템(system): network, graph
		- 그래프는 관계에 대한 일반적인 언어임. 다른 도메인에도 같은 그래프 구조를 사용해 표현할 수 있음.
	11.	네트워크 vs 그래프
		- 네트워크는 보통 실세계의 시스템을 이름. 웹, 소셜 네트워크, 대사작용 네트워크 등. 
		어휘: 네트워크, 노드, 링크 등
		
		- 그래프는 보통 네트워크의 수학적인 표현을 말함. 웹 그래프, 소셜 그래프, 지식 그래프 등. 
		어휘: 그래프, 꼭지점(vertex), 엣지(edge)
		
	12.	네트워크 정의하는 방법
		- 어떤 것이 노드고, 어떤 것이 엣지인가?
		- 주어진 도메인/문제에 적합한 네트워크 표현을 선택하는 것은 네트워크를 성공적으로 활용할 수 있는 능력을 결정함.
		- 어떤 경우에는 유일하고, 모호하지 않은 하나의 표현 방법이 있을 수 있음.
		- 다른 경우에는 표현이 전혀 유일하지 않을 수 있음.
		- 링크에 할당하는 방식이 연구하고자 하는 문제의 성질을 결정짓게 될 것임.
		
	13.	유방향(directed)/무방향(undirected) 그래프 
		- 무방향 그래프: 링크의 방향이 없음. 즉 대칭적이고, 상호적인 그래프.
		예시: 협동, 페이스북 친구 관계 등
		
		- 유방향 그래프: 링크의 방향이 존재. 호(arcs)로 구성됨.
		예시: 전화 걸기, 트위터 팔로우
		
	14.	노드의 차수(Degree)
		- 무방향 그래프: degree k_i는 i 노드에 인접한 edge의 수를 의미. 그래프 내의 평균 차수는, 모든 엣지 수 * 2 / 모든 노드의 수
		- 유방향 그래프: 내차수(in-degree), 외차수(out-degree)를 각각 정의함. 노드의 총 차수는 이 둘의 합임.
			source node: d-in이 0인 노드
			sink node: d-out이 0인 노드
			
	15.	완전 그래프(complete graph)
		- 무방향 그래프의 엣지의 최대 수는 N(N-1)/2임. 이 때 그래프를 완전그래프라고 하며, 평균 차수는 N-1이 됨.
	16.	양자간 그래프(bipartite graph)
		- 분리된 두 집합 U, V로 노드가 모두 분할된, 모든 링크가 U에서 V의 노드 하나로 연결 된 그래프. 즉, U와 V는 독립적인 집합임. 
		U와 V는 각각 자기의 내부 노드끼리 연결되지 않음.
		- 예시: 작가-논문, 배우-작품, 유저-영화(평점매긴), 레시피-재료
		- ‘folded’ / projected bipartite graphs : 
		작가 협동 네트워크, 공통 작품 평점 부여 유저네트워크 등, bipartite graph내에서 같은 U/V와 link된 노드들의 네트워크
		
	17. 그래프의 표현: 인접행렬(Adjacency Matrix)
		- 만일 노드 i에서 j로 이어지는 링크가 있을 경우, A_ij=1 
		- 그렇지 않으면 A_ij=0
		- 이 정보를 포함하는 행렬 A를 인접행렬이라고 함.
		- 이 때, 유방향 그래프는 대칭적이지 않다는 사실에 주목할 것.
		- 행렬의 크기는 n*n으로, 여기서 n은 노드의 수를 의미함.
		- 차수(degree)를 알기 위해서는, 주어진 행/열에 몇개의 0이 아닌 값이 존재하는지를 확인하면 됨.
		- 유방향 그래프에서는, 해당 행에서의 0 아닌 원소 수를 세면 out-degree, 반대로 해당 열에서의 0아닌 원소 수를 세면 in-degree를 구할 수 있음.
		
		- 이 인접행렬은 sparse함. 노드의 수에 비해 연결 정보는 희박하기 때문임.

	18. 그래프의 표현: Edge list
		- edge의 집합으로써 그래프를 표현함.
		- (2,1), (2,3), (3,1) ..
		
	19. 그래프의 표현: 인접 리스트 (Adjacency list)
		- 만약 네트워크가 크고 sparse할 때 더욱 쉽게 다룰 수 있는 방법임.
		- 노드가 주어졌을 때 모든 이웃을 빠르게 찾을 수 있도록 해줌.
		- 예시
			1:
			2: 3,4
			3: 2,4
			4: 5
			5: 1,2
		
	20. 네트워크는 sparse한 graph다
		- 대부분의 실세계 네트워크는 sparse함.
		- 즉, complete graph에서 거리가 멂. 
		- WWW (stanford-Berkeley) 네트워크는 319,717개의 노드를 갖지만, 평균 차수는 9.65에 불과함. 
		이는 complete graph의 319,716(N-1)이라는 평균 차수보다 매우 낮은 값임.
		- 따라서 인접행렬이 0으로 가득 차있음!
		
		- 가능한 옵션들: 
			Weight(e.g. 소통의 빈도)
			Ranking(베프, 두번째 베프...)
			Type(친구, 친척, 동료..)
			Sign: 친구vs적, 신뢰vs불신
			그래프 나머지 부분의 구조에 의존하는 특성 : 공통 친구의 수
			
	21. 그래프의 더 많은 타입들
		- 비가중 그래프 Unweighted(undirected) vs 가중 그래프 Weighted(undirected)
		- 비가중 그래프 (Unweighted): 가중치가 없고, 모두 1 혹은 0의 값을 가짐.
			예시로 친구, 하이퍼링크 등을 들 수 있음.
		- 가중 그래프 (Weighted): 가중치가 있음. 
			예시로 협력, 인터넷, 길 등을 들 수 있음.
			
			
		- 자체 엣지(undirected)/self-edges(self-loops): 
			A_ii가 0이 아님. 즉, 행렬의 대각원소가 0이 아닌 값이 존재함.
		- 다중 그래프(multigraph): 
			가중 그래프와 유사하지만, 각 1의 값이 별개의 엣지를 의미하게 됨. 3의 값은 3개의 엣지가 노드 사이에 있음을 의미.
			
	22. 무방향 그래프의 연결성
		- 연결된(connected) (무방향의) 그래프:
			어느 두 꼭지점이든 경로(path)에 의해 결합될 수 있음.
		- 단절된(disconnected) 그래프는 2개 혹은 그 이상의 연결된 구성 요소로 구성됨.
		
		- 거대 요소(giant component): 단절된 그래프 내의 가장 큰 연결된 구성 요소
		- 고립된 노드(isolated node): 어느 다른 노드와도 연결되지 않은 노드
		
		
		- 다리 엣지(bridge edge): 한 엣지를 지울 때 그래프가 단절(disconnected)되면, 이를 다리 엣지라고 함.
		- 관절 노드(Articulation node): 한 노드를 지울 때 그래프가 단절(disconnected)되면, 이를 관절 노드라고 함.
		
		- 여러 연결된 구성 요소로 이루어 진 인접 행렬은 블록-대칭 형태로 쓰여질 수 있음. 
			이 안에서, 0이 아닌 원소들은 정사각형 내부에 제한될 수 있고, 다른 모든 요소들은 모두 0이 되는 형태를 띰.
	
	
	23. 유방향 그래프의 연결성
		- 강하게 연결된 유방향 그래프(Strongly connected directed graph):
			모든 각 노드가 각각 다른 노드로부터의 경로를 갖고, 그 반대도 사실. (예를 들어, A-B 경로와 B-A 경로)
		- 약하게 연결된 유방향 그래프(Weakly connected directed graph):
			엣지 방향을 무시할 경우 연결된 형태.
			 
		- 강하게 연결된 구성요소(Strongly connected components, SCCs)이 발견될 수 있으나,
			모든 전체 노드가 당연하지 않은 강하게 연결된 구성요소임. 
			(SCCs can be identified, but not every node is part of a nontrivial strongly connected component)
			
			* 시각 자료에서, 왼쪽 하단의 가장 작은 SCC는 실수라고 함. 각각의 노드들이 서로 방향이 있어야 SCC가 성립됨.
			
			In-component: SCC에 도달할 수 있는 노드들
			Out-component: SCC로부터 도달할 수 있는 노드들
			
			
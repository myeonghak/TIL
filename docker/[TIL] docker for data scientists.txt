[TIL] docker for data scientists



1. https://youtu.be/0qG_0CPQhpg

2. 

3. build 단계: dockerfile을 먼저 만듦. 여기서는 운영체제와, 기본적인 프로그램(htop, python 등)을 설치할 수 있음. 
	- FROM: 운영체제 (ex. Ubuntu 18.04)
	- RUN: apt update/install(여기서 -y를 달아 주어야 함), wget 등의 커맨드로 필요한 기본 파일을 설치할 수 있음. 
	- ENV: ENV(환경) 변수와 관련된 도커파일의 레퍼런스를 지정해 줌. 도커 공식문서에서는 새로운 프로그램을 설치할 경우 환경변수를 업데이트 해주어야한다 설명되어 있음.
	- ARG: 도커 이미지를 build할때만 사용할 수 있음. ENV 변수를 그 주변에서, 도입된 라인에서 작동하도록 하기 위해 사용 가능(to set ENV values to work around that)

4. 도커 공식 문서를 학습할 것!

5. mount: -v argument로 마운트할 위치를 지정해줄 수 있음. 이 때 절대경로로 지정해 주어야 작동함!
	- 이렇게 마운트 된 경우, 데이터들끼리 서로 연동됨. 한 곳에서 수정을 가하면 다른 한 곳에서도 수정이 이루어 짐.

6. -c argument: command를 의미하는 듯. 이 이후에 문자열로 터미널에서 작동하는 커맨드를 입력해서 전달하면, 컨테이너가 실행됨과 동시에 바로 해당 커맨드가 실행됨. 

7. 도커 gpu 사용: docker nvidia runtime을 설치해야 함. 윈도우에서는 지원하지 않음.
	- docker run —gpus 1 이 커맨드는 로컬의 gpu를 그대로 쓰는 것?

8. FROM 다른 도커이미지
	- 이 커맨드로 다른 이미지 위에 커스터마이징해서 새로운 이미지를 빌드할 수도 있음

9. port 연결하기
	- app.py로 인해 실행되는 플라스크 API는 그대로 사용할 수 없음. 그 이유는 해당 포트가 컨테이너 내부에서 열려있기 때문임. 이를 호스트의 포트와 연결하는 작업이 필요
	- 이 작업을 “ -p 연결하고픈포트:웹앱이연결된포트 “로 수행할 수 있음

10. 도커 컨테이너를 도커허브에 업로드하여 다른 사람이 사용할 수 있게할 수도 있음

11. 실행 코드가 너무 길다면 bash script로 만들거나, file로 만들어서 관리하면 편리함.

12. 번외: alphine linux를 사용하면 파이썬을 slimmer하게 사용할 수 있다?!
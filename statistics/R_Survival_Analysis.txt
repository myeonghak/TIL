install.packages("tidyverse")

# 0. 팩키지 -----
library(tidyverse)
library(ranger)
library(survival)
library(extrafont)
loadfonts()
library(caret)

# 1. 데이터 -----

setwd("C:/Users/nilsi/OneDrive/Desktop/R_folder")
paste(getwd(),"/R_folder",sep="")


#download.file(url="https://cdn2.hubspot.net/hubfs/532045/Discriminant-analysis-churn-dataset.csv?t=1537486781722", destfile = "/Users/nilsi/Desktop/R_folder/sgi-churn.csv")


churn_dat <- read_csv("./R_folder/Discriminant-analysis-churn-dataset.csv")

# 5k * 8 데이터 프레임, 이탈 여부가 target이며 그 외에는 사용량 등이 존재

churn_dat

# 5000개 샘플 중 707개가 이탈 데이터, 약 14.14%
sum(churn_dat$churn)/5000

# 이탈 여부를 "Yes" 혹은 "No"로 바꿈 
churn_df <- churn_dat %>% mutate(churn = factor(churn, levels=c(0,1), labels = c("No", "Yes")))

 
# train/test 데이터 분할 
churn_idx <- createDataPartition(churn_df$churn, p=0.7, list=FALSE)
train_df <- churn_df[churn_idx, ]
test_df <- churn_df[-churn_idx, ]
 
# ranger 함수는 랜덤포레스트 모델 기능을 구현.
?ranger

#Surv는 survival object를 생성함. (이는 target variable로 쓰임임)
?Surv

# 분석을 위해 예시 변수를 만듦
surv_example=Surv(train_df$account_length, train_df$churn)

# 2차원 매트릭스로 변환함
dim(surv_example)

surv_example[2]

head(surv_example)
tail(surv_example)

tail(train_df)
# 이탈한것만 152:Yes처럼 만들어놓고, 그 외에는 61+처럼 단순히 숫자만 사용하도록 만든 데이터.


# 랜덤포레스트 적합. target 변수는 Surv 변수로 두고, 학습용 데이터를 넣는다.
churn_rf <- ranger(Surv(account_length, churn) ~ ., data=train_df,importance = "permutation", write.forest = TRUE)

# 이탈 모델의 변수 중요도를 사용, 시각화하는 코드
churn_varimp_df <- churn_rf$variable.importance %>% as.data.frame %>% 
  rownames_to_column(var="variable") %>% 
  rename(importance = ".")
churn_varimp_df %>% 
  ggplot(aes(x=fct_reorder(variable, importance), y=importance)) +
geom_col(width=0.5) + coord_flip() +labs(x="", y="변수 중요도", title = "생존 랜덤 포레스트 모형 변수 중요도") +
  theme_minimal(base_family = "NanumGothic")


# 이탈 시점은 총 212개가 있음
length(unique(train_df$account_length))

# 각 시점마다 샘플들의 생존 확률을 계산
dim(pred_df)


# 고객 두명을 뽑아 생존 확률을 구함
pred_df <- data.frame(churn_rf$survival) %>% 
  add_rownames(., var ="customer") %>% 
  gather(time, retention, -customer) %>% 
  spread(customer, retention)


pred_df %>% gather(customer, retention_prob, -time) %>% 
  mutate(time = str_remove(time, "X") %>% as.integer) %>% 
  filter(customer %in% c("1", "7")) %>% 
  ggplot(aes(x=time, y=retention_prob, group=customer, color=customer)) +
  geom_point() +
  geom_line() +
  labs(x="시간", y="유지율(%)") +
  scale_y_continuous(labels = scales::percent, limits=c(0,1)) +
  theme(legend.position = "top")


pred_df




install.packages("Metrics")
library(Metrics)
churn_pred <- predict(churn_rf, test_df)
 
## 30일 경과 AUC 성능
auc(actual=as.integer(test_df$churn)-1, predicted=1 - churn_pred$survival[, which(churn_pred$unique.death.times==30)])


## 전체 시점 AUC 성능
auc_v <- vector("double", length = length(churn_pred$unique.death.times))
 
for(i in seq_along(churn_pred$unique.death.times)) {auc_v[i] <- auc(actual=as.integer(test_df$churn)-1, predicted=1 - churn_pred$survival[, which(churn_pred$unique.death.times==i)])}

churn_auc_df <- data.frame(time =churn_pred$unique.death.times, auc = auc_v)
 
churn_auc_df %>% 
  ggplot(aes(x=time, y=auc)) +
  geom_point() +
  geom_line() +
  labs(x="시간", y="AUC", title = "각 시점별 예측모형 성능(AUC)") +
  theme_minimal(base_family = "NanumGothic")


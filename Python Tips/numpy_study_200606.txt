14. 공부할 넘파이 및 빌트인 함수들

1) zip 함수
2) np.tile
3) np.corrcoef(식 공부)
4) np. meshgrid
5) np.zeros_like
6) np.logspace
7) 멀티프로세싱


## .reshape(-1)
-> flatten

## [2,2,2,]
-> [2, 2, 2]
(하나까진 허용된다 ;)


1) zip
-> 동일 길이의 2개의 리스트(를 비롯한 모든 반복 가능한 자료형, iterable. 자료형이 달라도 가능!)을 지퍼처럼 하나씩 엮어줌.
-> 길이가 다를 경우 (m개와 n개, m>n) n개 까지만 zip 되고 그 이후는 무시됨

[1]

numbers = [1, 2, 3] | {1,2,3} | (1,2,3)
letters = ['a', 'b', 'c'] |  {'a', 'b', 'c'} | (1,2,3)
zipped = zip(numbers, letters)
zipped  # Holds an iterator object

list(zipped)
>>> [(1, 'a'), (2, 'b'), (3, 'c')]

[2]

dic={1:"a",2:"b",3:"c"}

list(zip(dic.keys(),dic.values()))

[(1, 'a'), (2, 'b'), (3, 'c')]



2) itterow
-> df의 각 행을 index와 value로 각각 뱉어줌. 2개의 값을 출력함.

df = pd.DataFrame([[1, 1.5],[2,2],[3,3]], columns=['int', 'float'])
row = next(df.iterrows())[1]

for i,k in df.iterrows():
    print(i,k)
	
	
3) np.tile(value, 반복_times)
value를 반복_times 횟수만큼 반복한 값을 출력해줌!
np.tile(2,3)
> array([2, 2, 2])


4) np.corrcoef(x)
상관계수 matrix를 출력함.

5) np.linspace(a,b,n)
-> a부터 b까지 n개의 값을 균일하게 쪼개어 뱉어줌.


>>> nx, ny = (3, 2)
-> 튜플의 각 값이 지정됨 ㄷㄷ (nx=3, ny=2)

>>> x = np.linspace(0, 1, nx)
>>> y = np.linspace(0, 1, ny)

>>> array([0. , 0.5, 1. ])
>>> array([0., 1.])


6) np.meshgrid(x,y, sparse=False)
-> x를 가로로 복제, y를 세로로 복제하여 망 형태(mesh grid)로 바꾸어주는 함수. 어떤 효익이 있을지 아직 제대로 파악 못함.

np.meshgrid(np.arange(1, 7, 3), np.arange(2, 8, 3))[0].reshape(-1)


7) np.zeros_like(list_type):
Return an array of zeros with the same shape and type as a given array.
즉, 리스트의 알맹이를 다 0으로 바꿔치워준다는 것

8) np.logspace(start,stop, num=50, base=10.0...)
Return numbers spaced evenly on a log scale.

즉, 시작과 끝의 실수값을 받아, 그 사이에 균일히 배치된 값을 로그스케일로 뱉어냄.

np.logspace(1,3)

>>>array([  10.        ,   10.98541142,   12.06792641,   13.25711366,
         14.56348478,   15.9985872 ,   17.57510625,   19.30697729,
         21.20950888,   23.29951811,   25.59547923,   28.11768698,
         30.88843596,   33.93221772,   37.2759372 ,   40.94915062,
         44.98432669,   49.41713361,   54.28675439,   59.63623317,
         65.51285569,   71.9685673 ,   79.06043211,   86.85113738,
         95.40954763,  104.81131342,  115.13953993,  126.48552169,
        138.94954944,  152.64179672,  167.68329368,  184.20699693,
        202.35896477,  222.29964825,  244.20530945,  268.26957953,
        294.70517026,  323.74575428,  355.64803062,  390.69399371,
        429.19342601,  471.48663635,  517.94746792,  568.9866029 ,
        625.05519253,  686.648845  ,  754.31200634,  828.64277285,
        910.29817799, 1000.        ])
		
		






